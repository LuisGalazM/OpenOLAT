/**
 * The math editor plugin offers a latex-formula real-time authoring environment.
 * See how it looks as you type. The plugin uses MathJax to format the tex formulas.
 * 
 * 18.06.2009 timo.wuersch@frentix.com
 */
(function() {
    'use strict'; 
    
    var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');
    
    var cachedTrans;
	var cachedCoreTrans;
	var MathJax = window.MathJax;
	// Load the OLAT translator.
	function translator() {	
		if(cachedTrans) return cachedTrans;
		var mainWin = o_getMainWin();
		if (mainWin) {
			cachedTrans = jQuery(document).ooTranslator().getTranslator(mainWin.o_info.locale, 'org.olat.core.gui.components.form.flexible.impl.elements.richText.plugins.olatmatheditor')	
		} else {
			cachedTrans = {	translate : function(key) { return key; } }
		}
		return cachedTrans;
	}
	
	function coreTranslator() {	
		if(cachedCoreTrans) return cachedCoreTrans;
		var mainWin = o_getMainWin();
		if (mainWin) {
			cachedCoreTrans = jQuery(document).ooTranslator().getTranslator(mainWin.o_info.locale, 'org.olat.core');
		} else {
			cachedCoreTrans = {	translate : function(key) { return key; } }
		}
		return cachedCoreTrans;
	}
    
    function isLatexElement(element) {
		return element.hasAttribute('data-mathtex');
	}
    
	/**
	 * Initializes the plugin, this will be executed after the plugin has been created.
	 * This call is done before the editor instance has finished it's initialization so use the onInit event
	 * of the editor instance to intercept that event.
	 *
	 * @param {tinymce.Editor} ed Editor instance that the plugin is initialized in.
	 * @param {string} url Absolute URL to where the plugin is located.
	 */
	var register = function (editor, url) {
			
		var insertLatex = function(dialogApi, contentNode) {
	        let tex = dialogApi.getData().latex;
	        // Check whether the selection is a jsMath objet by looking at its class attribute
	        if ((contentNode != null) && (/math/.test(editor.dom.getAttrib(contentNode, "class")))) {
	        	if(tex == null || tex.length == 0) {
	        		editor.dom.remove(contentNode);
	        	} else {
	            	editor.dom.setAttrib(contentNode, "data-mathtex", tex);
	            	editor.dom.setAttrib(contentNode, "data-mce-placeholder", "latex")
	            	editor.dom.setAttrib(contentNode, 'title', escape(tex));
	            	contentNode.innerHTML = tex;
	            	checkElement(contentNode);
	            }
	            editor.execCommand("mceRepaint");
				editor.setDirty(true);
	        } else if(tex != null && tex.length > 0) {
	            let newElement = editor.getDoc().createElement('span');
          		newElement.innerHTML = tex;
	            newElement.setAttribute("data-mathtex", tex);
	            newElement.setAttribute("data-mce-placeholder", "latex")
	            newElement.setAttribute('title', escape(tex));
				newElement.classList.add('math');
				checkElement(newElement);
				editor.insertContent(newElement.outerHTML);
	        }
	        
			try {
        		editor.getDoc().defaultView.MathJax.typeset();
			} catch(e) {
				// try
			}
	        
			let mf = document.getElementById('mathlive');
			if(mf) {
				mf.executeCommand("hideVirtualKeyboard");
			}
	        dialogApi.close();
		};
		
		var closeKeyboardLatex = function() {
			let mf = document.getElementById('mathlive');
			if(mf) {
				mf.executeCommand("hideVirtualKeyboard");
			}
		};
		
		var checkElement = function(element) {
			if (element.childNodes.length != 2) {
				element.setAttribute('contenteditable', false);
				element.style.cursor = 'pointer';
				let latex = element.getAttribute('data-mathtex') || element.innerHTML;
				element.setAttribute('data-mathtex', latex);
				element.setAttribute('data-mce-placeholder', 'latex');
				element.innerHTML = '';

				let math = editor.dom.create('span');
				if(latex.indexOf('$$') == 0 || latex.indexOf('\\(') == 0 || latex.indexOf('[[') == 0) {
					math.innerHTML = latex;
				} else {
					math.innerHTML = '\\(' + latex + '\\)';
				}
				math.classList.add('math-original');
				element.appendChild(math);

				let dummy = editor.dom.create('span');
				dummy.classList.add('dummy');
				dummy.innerHTML = 'dummy';
				dummy.setAttribute('hidden', 'hidden');
				element.appendChild(dummy);
			}
		};
		
		var mathJaxConfiguration = function() {
			return {
				tex: {
					inlineMath: [['$$', '$$'], ['\\(', '\\)']],
					macros: {
						exponentialE: "\\mathrm{e}",
						imaginaryI: "\\mathrm{i}",
						differentialD: "\\mathrm{d}"
					}
				},
				options: {
					enableMenu: false,
					processHtmlClass: 'tex2jax_process'
				}
			};
		}
			
		function showDialog() {
		
			let data = {
				latex: ''
			};
			
			let selectedNode = editor.selection.getNode();
	        if ((selectedNode.nodeName.toLowerCase() == "span") && (selectedNode.className.indexOf("math") >= 0)) {
				let content = jQuery(selectedNode).attr('data-mathtex');
				if(content != null) {
					content = content.replaceAll("&amp;", "&");
				}
				data.latex = content;
	        }
	        
			let mathJaxUrl = editor.getParam("mathJaxUrl");
			let mathLiveUrl = editor.getParam("mathLiveUrl");
	        let mathLiveHtml = '<script src="' + mathLiveUrl + '"></script>';
			mathLiveHtml += '<math-field id="mathlive" virtual-keyboard-mode="onfocus" tabindex="-1" data-alloy-tabstop="true">' + data.latex + '</math-field>';
			
			let helpButton = coreTranslator().translate('help');
			let helpLink = editor.getParam("olatmatheditor_helpUrl" + o_getMainWin().o_info.locale);
			let helpHtml = "<div class='pull-right'><span class='o_chelp_wrapper'><a href='" + helpLink + "' class='o_chelp' target='_blank'><i class='mce-ico mce-i-help'> </i> " + helpButton + "</a></span></div>";
			
			let body = {
				type: 'panel',
				items: [
					{ name: 'helphints', type: 'htmlpanel', label: '',
				    	html:'<div style="width:100%;" class="help-block">' + translator().translate('olatmatheditor.latexGroupHelpHint') + '</div>'
					},
				    { name: 'help', type: 'htmlpanel', label: '', html: helpHtml },
					{ name: 'cortexLabel', type: 'label', label: translator().translate('olatmatheditor.mathLiveTitle'), items: [] },
					{ name: 'cortex', type: 'htmlpanel', label: '', html: mathLiveHtml },
				   	{ name: 'latex', type: 'textarea', label: translator().translate('olatmatheditor.latexGroupTitle') },
					{ name: 'hints', type: 'htmlpanel', label: '',
				    	html:'<div style="width:100%;" class="help-block">' + translator().translate('olatmatheditor.latexGroupHint') + '</div>'
					},
					{ name: 'previewLabel', type: 'label', label: translator().translate('olatmatheditor.previewGroupTitle'), items: [] },
				    { name: 'preview', type: 'htmlpanel', label: '',
				    	html: '<iframe id="mathpreviewFormula" srcdoc="<!DOCTYPE html><html><head><script src=\'' + mathJaxUrl + 'tex-mml-chtml.js\'></script></head><body style=\'background-color:#fcfcfc\'><div class=\'math\'>&nsbp;</div></body></html>" style="width: 100%; min-height: 50px;"></iframe>'
 					}
				]
			};
			
			var win = editor.windowManager.open({
				title: translator().translate('olatmatheditor.formulaTabTitle'),
				size: 'medium',
				body: body,
				initialData: data,
				buttons: [
					{
						type: 'cancel',
						name: 'cancel',
						text: 'Cancel'
					},
					{
						type: 'submit',
						name: 'save',
						text: 'Save',
						primary: true
					}
		        ],
		        onChange: function(dialogApi) {
					var mf = document.getElementById('mathlive');
					mf.setValue(dialogApi.getData().latex, {suppressChangeNotifications: true});
					updatePreview(dialogApi);
				},
				onSubmit: function(dialogApi) {
					insertLatex(dialogApi, selectedNode);
				},
				onCancel: closeKeyboardLatex,
				onClose: closeKeyboardLatex
			});
			
			function updatePreview(dialogApi) {
				// add scripts to iframe
				let iframe = document.getElementById("mathpreviewFormula");
				let iframeWindow = iframe.contentWindow || iframe.contentDocument.document || iframe.contentDocument;
				let iframeDocument = iframeWindow.document;
				if(iframeWindow.MathJax === undefined) {
					iframeWindow.MathJax = mathJaxConfiguration();
				}

				let iframeBody = iframeDocument.getElementsByTagName('body')[0];
				let div = iframeBody.querySelector('div');
				if (!div) {
					div = iframeDocument.createElement('div');
					div.classList.add("math");
					iframeBody.appendChild(div);
				}
				
				let data = dialogApi.getData();
				let tex = data.latex;
				if(tex == null || tex.length == 0) {
					let emptyHtml = "<div class='o_empty_state' style='text-align: center;'><div class='o_empty_visual'><h2>&Sigma;</h2></div>";
					emptyHtml += "<h4 class='o_empty_msg' style='font-family: sans-serif;'>" + translator().translate('olatmatheditor.empty.title') + "</h4>";
					emptyHtml += "<div class='o_empty_hint' style='font-family: sans-serif;'>" + translator().translate('olatmatheditor.empty.hint') + "</div></div>";
					div.innerHTML = emptyHtml;
				} else {
					div.innerHTML = '$$' + tex + '$$';
					let MathJax = iframeWindow.MathJax;
					if (MathJax && MathJax.startup) {
						MathJax.typeset();
					}
				}
			}
			
			let mathliveEl = document.getElementById('mathlive');
			mathliveEl.addEventListener('input',(ev) => {
    			var newData = {
    				latex: ev.target.value
    			}
    			win.setData(newData);
				updatePreview(win);
			});
			mathliveEl.addEventListener('focusout',(ev) => {
				// when navigating out of the mathlive, try to find the latex-textarea 
				// and set focus there (accessbility)
				try {
					let el = ev.target;
					let latexArea = el.closest('.tox-form').querySelector('textarea');
					latexArea.focus();
				} catch(e) {
					if(window.console) console.log(e);
				}
			});
			
			// Don't mess with the iframe directly, Firefox want you to do it in a setTimeout
			setTimeout(function() {
				updatePreview(win);
			}, 111);
			
			// Tiny set the focus, we override it
			setTimeout(function() {
				try {
					let mathliveEl = document.getElementById('mathlive');
					mathliveEl.focus();
					mathliveEl.shadowRoot.querySelector('.ML__virtual-keyboard-toggle').classList.add('is-visible');
					mathliveEl.executeCommand('moveToMathfieldEnd');
				} catch(e) {
					if(window.console) console.log(e);
				}
			}, 333);
		}
		
		editor.on('init', function() {
			if (editor.settings.content_css !== false) {
				editor.dom.loadCSS(url + "/css/content.css");
			}

		    let scripts = editor.getDoc().getElementsByTagName('script');

			// check if script have already loaded
			let id = editor.dom.uniqueId();
			let mathJaxUrl = editor.getParam("mathJaxUrl") + 'tex-mml-chtml.js';
			let script = editor.dom.create('script', { id: id, type: 'text/javascript', src: mathJaxUrl });
			let found = false;
			for (let j = 0; j < scripts.length; j++) {
				if (scripts[j].src == script.src) {
					found = true;
					break;
				}
			}
			// load script
			if (!found) {
				editor.getDoc().defaultView.MathJax = mathJaxConfiguration();
				editor.getDoc().getElementsByTagName('head')[0].appendChild(script);
			}
		});
		
		// add dummy tag on set content
		editor.on('BeforeSetContent', function (e) {
			let div = editor.dom.create('div');
			div.innerHTML = e.content;
			let elements = div.querySelectorAll('.math');
			for (let i = 0 ; i < elements.length; i++) {
				checkElement(elements[i]);
			}
			e.content = div.innerHTML;
		});

		// refresh mathjax on set content
		editor.on('SetContent', function(e) {
			if (editor.getDoc().defaultView.MathJax && typeof editor.getDoc().defaultView.MathJax.startup !== "undefined") {
				editor.getDoc().defaultView.MathJax.typeset();
			} else {
				setTimeout(function() {
					if (editor.getDoc() != null
							&& editor.getDoc().defaultView != null
							&& editor.getDoc().defaultView.MathJax
							&& typeof editor.getDoc().defaultView.MathJax.startup !== "undefined") {
						editor.getDoc().defaultView.MathJax.typeset();
					}
				}, 2000);
			}
		});
		
		editor.on('click', function(e) {
			if (jQuery(e.target).closest(".math").length > 0) {
				showDialog();
			}
		});

        /** 
          * This onPreProcess handler is used to remove the dummy tags and bring back the
          * &lt;span class="math"&gt; tags when saving the document.
          */
		editor.on('PreProcess',function(e, format) {
			jQuery('span.math', e.node).each(function(idx, elm) {
				let span = editor.dom.create("span", {
					"class": "math",
					title : elm.title
				}, jQuery(elm).attr('data-mathtex'));
				editor.dom.replace(span, elm);
			});
		});

		// Register plugin button
		editor.ui.registry.addToggleButton('olatmatheditor', {
			icon : 'oo-sigma',
			tooltip : translator().translate('olatmatheditor.desc'),
			onAction: showDialog,
			onSetup: function (buttonApi) {
				let selection = editor.selection;
				buttonApi.setActive(isLatexElement(selection.getNode()));
				return selection.selectorChangedWithUnbind('span[data-mathtex]', buttonApi.setActive).unbind;
			}
		});
			
		editor.ui.registry.addMenuItem('olatmatheditor', {
			text : translator().translate('olatmatheditor.desc'),
			icon : 'oo-sigma',
			onAction: showDialog,
		});
	};
	
	function Plugin () {
		global$2.add('olatmatheditor', function (editor, url) {
			register(editor, url);
		});
    }

    Plugin();
})();
